[1mdiff --git a/external_headers/boost/fusion/container/vector/vector10.hpp b/external_headers/boost/fusion/container/vector/vector10.hpp[m
[1mindex 28531b6..7241488 100644[m
[1m--- a/external_headers/boost/fusion/container/vector/vector10.hpp[m
[1m+++ b/external_headers/boost/fusion/container/vector/vector10.hpp[m
[36m@@ -51,7 +51,7 @@ namespace boost { namespace fusion[m
         vector0() {}[m
 [m
         template<typename Sequence>[m
[31m-        vector0(Sequence const& seq)[m
[32m+[m[32m        vector0(Sequence const&)[m
         {}[m
     };[m
 [m
[1mdiff --git a/external_headers/boost/math/special_functions/gamma.hpp b/external_headers/boost/math/special_functions/gamma.hpp[m
[1mindex 04126bb..3aff71e 100644[m
[1m--- a/external_headers/boost/math/special_functions/gamma.hpp[m
[1m+++ b/external_headers/boost/math/special_functions/gamma.hpp[m
[36m@@ -1417,7 +1417,7 @@ inline typename tools::promote_args<T1, T2>::type[m
 }[m
 template <class T1, class T2, class Policy>[m
 inline typename tools::promote_args<T1, T2>::type [m
[31m-   tgamma_ratio(T1 a, T2 b, const Policy& pol)[m
[32m+[m[32m   tgamma_ratio(T1 a, T2 b, const Policy&)[m
 {[m
    typedef typename tools::promote_args<T1, T2>::type result_type;[m
    typedef typename policies::evaluation<result_type, Policy>::type value_type;[m
