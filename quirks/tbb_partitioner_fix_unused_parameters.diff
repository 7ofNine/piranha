--- partitioner.h	2008-09-26 11:57:28.000000000 +0200
+++ partitioner.h.new	2008-09-29 17:45:05.000000000 +0200
@@ -60,9 +60,9 @@
 //! Provides default methods for partition objects without affinity.
 class partition_type_base {
 public:
-    void set_affinity( task &t ) {}
-    void note_affinity( task::affinity_id id ) {}
-    task* continue_after_execute_range( task& t ) {return NULL;}
+    void set_affinity( task & ) {}
+    void note_affinity( task::affinity_id ) {}
+    task* continue_after_execute_range( task& ) {return NULL;}
     bool decide_whether_to_delay() {return false;}
     void spawn_or_delay( bool, task& a, task& b ) {
         a.spawn(b);
@@ -92,8 +92,8 @@
 
     class partition_type: public internal::partition_type_base {
     public:
-        bool should_execute_range(const task &t) {return false;}
-        partition_type( const simple_partitioner& sp ) {}
+        bool should_execute_range(const task &) {return false;}
+        partition_type( const simple_partitioner& ) {}
         partition_type( const partition_type&, split ) {}
     };
 };
@@ -120,7 +120,7 @@
                 num_chunks = VICTIM_CHUNKS;
             return num_chunks==1;
         }
-        partition_type( const auto_partitioner& ap ) : num_chunks(internal::get_initial_auto_partitioner_divisor()) {}
+        partition_type( const auto_partitioner& ) : num_chunks(internal::get_initial_auto_partitioner_divisor()) {}
         partition_type( partition_type& pt, split ) {
             num_chunks = pt.num_chunks /= 2u;
         }
