PROJECT(piranha)
SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake_modules)
#SET(CMAKE_VERBOSE_MAKEFILE ON)
INCLUDE(${CMAKE_ROOT}/Modules/CMakeDependentOption.cmake)
INCLUDE(${CMAKE_ROOT}/Modules/FindPythonLibs.cmake)
INCLUDE(FindGMP)
INCLUDE(PiranhaCompilerLinkerSettings)
INCLUDE(PiranhaPythonSetup)
INCLUDE(CheckIncludeFiles)
INCLUDE(CPack)
INCLUDE(CheckTypeSize)
INCLUDE(CheckCXXCompilerFlag)
ENABLE_LANGUAGE(C CXX)
INCLUDE_DIRECTORIES("external_headers")

# Main build options
OPTION(BUILD_MAIN "Build 'main.cpp'." OFF)
CMAKE_DEPENDENT_OPTION(BUILD_PYRANHA_DPS "Build double precision Poisson series manipualtor in Pyranha." ON "BUILD_PYRANHA" OFF)
CMAKE_DEPENDENT_OPTION(BUILD_PYRANHA_QPS "Build rational Poisson series manipualtor in Pyranha." ON "BUILD_PYRANHA" OFF)
OPTION(ENABLE_ASSERTS "Enable asserts in code, for debugging." ON)
OPTION(BUILD_PYRANHA "Build Python bindings." OFF)
CMAKE_DEPENDENT_OPTION(BUILD_PYRANHA_GUI "Build Qt4 gui for pyranha." OFF "BUILD_PYRANHA" OFF)
OPTION(BUILD_TBB_MULTITHREADING "Use Intel's Thread Building Blocks for multi-threaded parallelism." OFF)
OPTION(BUILD_TESTS "Build performance and correctness tests." OFF)
OPTION(ENABLE_HOARD "Use the Hoard memory allocator - EXPERIMENTAL." OFF)
OPTION(ENABLE_SSE2 "Enable series type using SSE2 instructions (requires a SSE2-enabled CPU) - EXPERIMENTAL." OFF)
OPTION(ENABLE_DISPLAY_PROGRESS "Enable progress display during long operations." ON)

SET(MANDATORY_LIBRARIES "")
SET(PIRANHA_DEFINITIONS "")

CHECK_TYPE_SIZE("void *" POINTER_SIZE)
MESSAGE(STATUS "Pointer size is " ${POINTER_SIZE})

IF(ENABLE_DISPLAY_PROGRESS)
  SET(PIRANHA_DEFINITIONS ${PIRANHA_DEFINITIONS} -D_PIRANHA_DISPLAY_PROGRESS)
ENDIF(ENABLE_DISPLAY_PROGRESS)

IF(BUILD_TBB_MULTITHREADING)
  IF(WIN32)
# This is irrelevant at the moment, since TBB does not compile yet in MinGW.
    SET(PIRANHA_DEFINITIONS ${PIRANHA_DEFINITIONS} -DUSE_WINTHREAD)
  ELSE(WIN32)
    SET(PIRANHA_DEFINITIONS ${PIRANHA_DEFINITIONS} -DUSE_PTHREAD)
    SET(MANDATORY_LIBRARIES ${MANDATORY_LIBRARIES} pthread dl)
  ENDIF(WIN32)
  SET(PIRANHA_DEFINITIONS ${PIRANHA_DEFINITIONS} -D_PIRANHA_TBB)
  EXECUTE_PROCESS(COMMAND sh version_info_linux.sh OUTPUT_FILE src/tbb/version_string.tmp)
ENDIF(BUILD_TBB_MULTITHREADING)

PIRANHA_COMPILER_LINKER_SETTINGS()
IF(BUILD_PYRANHA)
  PIRANHA_PYTHON_SETUP()
ENDIF(BUILD_PYRANHA)

# Set linking flags.
SET(MANDATORY_LIBRARIES ${MANDATORY_LIBRARIES} ${LINK_FLAGS})

# Platform switches
IF(MINGW)
  SET(PIRANHA_DEFINITIONS ${PIRANHA_DEFINITIONS} -D_PIRANHA_WIN32)
# TODO: generalize this using variables, e.g. %SystemRoot and such?
  SET(LIB_INSTALL_PATH "c:/windows/system32")
ELSE(MINGW)
  SET(LIB_INSTALL_PATH "lib")
ENDIF(MINGW)

# Find GMP.
FIND_PACKAGE(GMP REQUIRED)
SET(MANDATORY_LIBRARIES ${MANDATORY_LIBRARIES} ${GMP_LIBRARIES} ${GMPXX_LIBRARIES})

# SSE2
IF(ENABLE_SSE2)
  SET(PIRANHA_DEFINITIONS ${PIRANHA_DEFINITIONS} -D_PIRANHA_SSE2)
  CHECK_INCLUDE_FILES(emmintrin.h HAVE_EMMINTRIN_H)
  IF(NOT HAVE_EMMINTRIN_H)
    MESSAGE(FATAL_ERROR "Missing SSE2 intrinsics header.")
  ENDIF(NOT HAVE_EMMINTRIN_H)
ENDIF(ENABLE_SSE2)

# Common stuff
SET(CMAKE_BUILD_TYPE "Release")
# Find out motion theories files to be installed
SET(THEORIES_INSTALL_PATH "${CMAKE_INSTALL_PREFIX}/share/piranha/theories")
SET(PIRANHA_DEFINITIONS ${PIRANHA_DEFINITIONS} -D_GNU_SOURCE -D_PIRANHA_DEFAULT_PATH=\"\\"${THEORIES_INSTALL_PATH}\\"\")
IF(ENABLE_ASSERTS)
  SET(PIRANHA_DEFINITIONS ${PIRANHA_DEFINITIONS} -D_ENABLE_ASSERTS)
ENDIF(ENABLE_ASSERTS)
IF(BUILD_TBB_MULTITHREADING OR ENABLE_HOARD)
  SET(PIRANHA_DEFINITIONS ${PIRANHA_DEFINITIONS} -D_REENTRANT)
ENDIF(BUILD_TBB_MULTITHREADING OR ENABLE_HOARD)

# Hoard is not supported ATM on Win32.
IF(ENABLE_HOARD AND WIN32)
  MESSAGE(FATAL_ERROR "The Hoard memory allocator is not supported, at the moment, under MinGW.")
ENDIF(ENABLE_HOARD AND WIN32)

# TBB is not supported ATM on Win32.
IF(BUILD_TBB_MULTITHREADING AND WIN32)
  MESSAGE(FATAL_ERROR "Intel TBB cannot be compiled in MinGW at the moment.")
ENDIF(BUILD_TBB_MULTITHREADING AND WIN32)

ADD_DEFINITIONS(${PIRANHA_DEFINITIONS})

# Add library directory
ADD_SUBDIRECTORY(src)

# Build a main.cpp file included in the source dir
IF(BUILD_MAIN)
  ADD_EXECUTABLE(main main.cpp)
  TARGET_LINK_LIBRARIES(main ${MANDATORY_LIBRARIES} piranha_static)
ENDIF(BUILD_MAIN)

IF(BUILD_TESTS)
  ADD_SUBDIRECTORY(tests)
ENDIF(BUILD_TESTS)

# pyranha: piranha's python bindings
IF(BUILD_PYRANHA)
# Mandatory linking.
#  SET(MANDATORY_LIBRARIES ${MANDATORY_LIBRARIES} piranha)
  ADD_SUBDIRECTORY(pyranha)
ENDIF(BUILD_PYRANHA)

# Install phase: find and install theories of motion
FILE(GLOB_RECURSE THEORIES theories_of_motion/*.csv theories_of_motion/*.phl theories_of_motion/*.dat)
INSTALL(FILES ${THEORIES} DESTINATION ${THEORIES_INSTALL_PATH})
